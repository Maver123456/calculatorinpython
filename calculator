import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog, ttk
import math

class PolishedScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("✨ Polished Scientific Calculator")
        self.root.geometry("560x680")
        self.root.resizable(False, False)

        self.expression = ""
        self.memory = 0
        self.history = []

        self.create_widgets()
        self.bind_keys()

    def create_widgets(self):
        # Entry Display
        self.entry = tk.Entry(self.root, font=("Consolas", 24), borderwidth=3, relief="sunken", justify='right')
        self.entry.pack(fill="x", ipadx=8, pady=10, padx=10)

        # History
        self.history_panel = scrolledtext.ScrolledText(self.root, height=8, state='disabled', font=("Consolas", 12))
        self.history_panel.pack(fill='both', padx=10, pady=5)

        # Button Frame
        btns_frame = tk.Frame(self.root)
        btns_frame.pack(pady=5)

        buttons = [
            ['7', '8', '9', '/', '√', '!'],
            ['4', '5', '6', '*', '^', '%'],
            ['1', '2', '3', '-', 'sin', 'cos'],
            ['0', '.', '=', '+', 'tan', 'log'],
            ['AC', 'C', 'M+', 'M-', 'MR', 'ln', 'Export']
        ]

        color_map = {
            "numbers": "#f8f9fa",
            "operators": "#ffb84d",
            "scientific": "#aee2ff",
            "memory": "#a8ffb0",
            "others": "#e0e0e0"
        }

        for row in buttons:
            row_frame = tk.Frame(btns_frame)
            row_frame.pack(fill="both")
            for btn_text in row:
                color = self.get_button_color(btn_text, color_map)
                btn = tk.Button(
                    row_frame, text=btn_text, font=("Arial", 16, "bold"),
                    bg=color, width=7, height=2, activebackground="#fce303",
                    command=lambda x=btn_text: self.on_click(x)
                )
                btn.pack(side="left", expand=True, fill="both", padx=2, pady=2)

    def get_button_color(self, text, cmap):
        if text in "0123456789.":
            return cmap["numbers"]
        elif text in "+-*/^%":
            return cmap["operators"]
        elif text in ['√', '!', 'sin', 'cos', 'tan', 'log', 'ln']:
            return cmap["scientific"]
        elif text in ['M+', 'M-', 'MR']:
            return cmap["memory"]
        else:
            return cmap["others"]

    def bind_keys(self):
        self.root.bind("<Key>", self.on_keypress)
        self.root.bind("<Return>", lambda e: self.calculate())
        self.root.bind("<BackSpace>", lambda e: self.backspace())
        self.root.bind("<Escape>", lambda e: self.clear_all())

    # -------------------- BUTTON ACTIONS --------------------
    def on_click(self, char):
        if char == 'C':
            self.backspace()
        elif char == 'AC':
            self.clear_all()
        elif char == '=':
            self.calculate()
        elif char == 'M+':
            self.memory_action('add')
        elif char == 'M-':
            self.memory_action('sub')
        elif char == 'MR':
            self.insert_memory()
        elif char == 'Export':
            self.export_history()
        else:
            self.expression += str(char)
            self.update_entry(self.expression)

    def backspace(self):
        self.expression = self.expression[:-1]
        self.update_entry(self.expression)

    def clear_all(self):
        self.expression = ""
        self.update_entry("")
        self.history.clear()
        self.update_history_panel()

    def memory_action(self, mode):
        try:
            val = float(self.entry.get())
            self.memory += val if mode == 'add' else -val
        except ValueError:
            messagebox.showinfo("Memory", "Invalid number to store.")

    def insert_memory(self):
        self.expression += str(self.memory)
        self.update_entry(self.expression)

    # -------------------- CALCULATE --------------------
    def calculate(self):
        try:
            expr = self.prepare_expression(self.expression)
            result = eval(expr, {"__builtins__": None}, {"math": math})
            self.history.append(f"{self.expression} = {result}")
            self.expression = str(result)
            self.update_entry(result)
            self.update_history_panel()
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression!\n{e}")
            self.expression = ""
            self.update_entry("")

    def prepare_expression(self, expr):
        expr = expr.replace('^', '**')
        expr = expr.replace('√', 'math.sqrt')
        expr = expr.replace('sin', 'math.sin(math.radians')
        expr = expr.replace('cos', 'math.cos(math.radians')
        expr = expr.replace('tan', 'math.tan(math.radians')
        expr = expr.replace('log', 'math.log10')
        expr = expr.replace('ln', 'math.log')
        expr = self.replace_factorial(expr)
        return expr

    def replace_factorial(self, expr):
        while '!' in expr:
            idx = expr.index('!')
            start = idx - 1
            while start >= 0 and (expr[start].isdigit() or expr[start] == '.'):
                start -= 1
            number = expr[start + 1:idx]
            expr = expr[:start + 1] + f"math.factorial(int({number}))" + expr[idx + 1:]
        return expr

    # -------------------- HISTORY --------------------
    def update_entry(self, value):
        self.entry.delete(0, tk.END)
        self.entry.insert(tk.END, str(value))

    def update_history_panel(self):
        self.history_panel.config(state='normal')
        self.history_panel.delete(1.0, tk.END)
        for item in self.history[-20:]:
            self.history_panel.insert(tk.END, f"{item}\n")
        self.history_panel.yview_moveto(1.0)
        self.history_panel.config(state='disabled')

    def export_history(self):
        if not self.history:
            messagebox.showinfo("Export", "No history to export.")
            return
        file = filedialog.asksaveasfilename(
            defaultextension=".txt", filetypes=[("Text Files", "*.txt")]
        )
        if file:
            with open(file, "w") as f:
                f.write("\n".join(self.history))
            messagebox.showinfo("Export", f"History saved to:\n{file}")

    # -------------------- KEYBOARD --------------------
    def on_keypress(self, event):
        key = event.char
        if key in "0123456789.+-*/%^":
            self.expression += key
            self.update_entry(self.expression)
        elif key == '\r':
            self.calculate()

# -------------------- MAIN --------------------
if __name__ == "__main__":
    root = tk.Tk()
    app = PolishedScientificCalculator(root)
    root.mainloop()
